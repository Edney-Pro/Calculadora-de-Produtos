// Estado da aplicação
let appState = {
    currentStep: 1,
    client: { name: '', cpf: '' },
    products: [],
    assembly: {
        active: false,
        value: 0,
        paymentOption: 'finance' // 'finance' or 'cash'
    },
    selectedDate: null, // { date: Date object, daysUntil: number }
    entryOption: null, // 'none' or 'with'
    entryPercent: 0,
    selectedInstallment: null, // { count: number, value: number }
    productsTotal: 0,
    financedValue: 0,
    entryValue: 0,
};

// REGRAS DE NEGÓCIO
const interestRules = {
    noEntry: 0.14, // 14% a.m.
    withEntry: {
        0: 0.12,   // 0-10%
        11: 0.11,  // 11-20%
        21: 0.10,  // 21-30%
        31: 0.09,  // 31-40%
        41: 0.08,  // 41-50%
        51: 0.11   // 51-60%
    }
};

const guaranteeRules = {
    1: 0.015,  // 1-12x
    13: 0.02,  // 13-24x
    25: 0.025, // 25-36x
    37: 0.03,  // 37-48x
    49: 0.035  // 49-60x
};

// Inicialização
document.addEventListener('DOMContentLoaded', initializeApp);

function initializeApp() {
    // Event listeners para validação
    document.getElementById('clientName').addEventListener('input', validateStep1);
    document.getElementById('clientCpf').addEventListener('input', e => {
        maskCPF(e);
        validateStep1();
    });
    document.getElementById('productName').addEventListener('keypress', e => e.key === 'Enter' && addProduct());
    const productValueInput = document.getElementById('productValue');
    productValueInput.addEventListener('input', maskCurrency);
    productValueInput.addEventListener('keypress', e => e.key === 'Enter' && addProduct());
    document.getElementById('entryPercent').addEventListener('input', validateStep4);

    // Iniciar
    updateProductsList();
    validateStep2();
    showStep(1);
}

// NAVEGAÇÃO
function showStep(step) {
    document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
    document.getElementById(`screen${step}`).classList.add('active');
    appState.currentStep = step;
    document.querySelectorAll('.progress').forEach(el => el.textContent = `${step}/5`);

    if (step === 3) generateDateOptions();
    if (step === 4) generateInstallments();
    if (step === 5) updateSummary();
}

function nextStep(currentStep) {
    let canProceed = false;
    switch(currentStep) {
        case 1: canProceed = validateStep1(); break;
        case 2: canProceed = validateStep2(); break;
        case 3: canProceed = validateStep3(); break;
        case 4: canProceed = validateStep4() && appState.selectedInstallment !== null; break;
    }
    if (canProceed && currentStep < 5) showStep(currentStep + 1);
}

function prevStep(currentStep) {
    if (currentStep > 1) showStep(currentStep - 1);
}

// VALIDAÇÕES
function validateStep1() {
    const name = document.getElementById('clientName').value.trim();
    const cpf = document.getElementById('clientCpf').value;
    const cleanCpf = cpf.replace(/[^\d]/g, '');
    const cpfError = document.getElementById('cpfError');
    
    let isCpfValid = isValidCPF(cleanCpf);
    cpfError.classList.toggle('show', cleanCpf.length > 0 && !isCpfValid);
    cpfError.textContent = isCpfValid ? '' : 'CPF inválido.';

    const isFormValid = name.length >= 3 && isCpfValid;
    document.getElementById('nextBtn1').disabled = !isFormValid;
    if (isFormValid) {
        appState.client = { name, cpf };
    }
    return isFormValid;
}

function validateStep2() {
    const isValid = appState.products.length > 0;
    document.getElementById('nextBtn2').disabled = !isValid;
    return isValid;
}

function validateStep3() {
    const isValid = appState.selectedDate !== null;
    document.getElementById('nextBtn3').disabled = !isValid;
    return isValid;
}

function validateStep4() {
    let isValid = false;
    if (appState.entryOption === 'none') {
        isValid = true;
    } else if (appState.entryOption === 'with') {
        const percent = parseInt(document.getElementById('entryPercent').value);
        isValid = !isNaN(percent) && percent >= 1 && percent <= 60;
    }
    generateInstallments();
    document.getElementById('nextBtn4').disabled = !isValid || appState.selectedInstallment === null;
    return isValid;
}

// ETAPA 2: PRODUTOS E MONTAGEM
function addProduct() {
    const nameInput = document.getElementById('productName');
    const valueInput = document.getElementById('productValue');
    const name = nameInput.value.trim();
    const value = parseFloat(valueInput.value.replace(/\./g, '').replace(',', '.'));

    if (!name || isNaN(value) || value <= 0) {
        alert('Por favor, preencha o nome e o valor do produto.');
        return;
    }
    if (appState.products.length >= 10) {
        alert('Máximo de 10 produtos atingido.');
        return;
    }

    appState.products.push({ id: Date.now(), name, value });
    updateProductsList();
    nameInput.value = '';
    valueInput.value = '';
    nameInput.focus();
}

function removeProduct(id) {
    appState.products = appState.products.filter(p => p.id !== id);
    updateProductsList();
}

function updateProductsList() {
    const container = document.getElementById('productsContainer');
    appState.productsTotal = appState.products.reduce((sum, p) => sum + p.value, 0);

    if (appState.products.length === 0) {
        container.innerHTML = '<p class="no-products">Nenhum produto adicionado</p>';
    } else {
        container.innerHTML = appState.products.map(p => `
            <div class="product-item">
                <div class="product-info">
                    <div class="product-name">${p.name}</div>
                    <div class="product-value">R$ ${p.value.toFixed(2).replace('.', ',')}</div>
                </div>
                <button class="remove-btn" onclick="removeProduct(${p.id})"><i class="fas fa-trash-alt"></i></button>
            </div>
        `).join('');
    }
    
    document.getElementById('visorTotal').textContent = `Total: R$ ${appState.productsTotal.toFixed(2).replace('.', ',')}`;
    document.getElementById('assemblySection').style.display = appState.productsTotal > 0 ? 'block' : 'none';
    
    if (appState.assembly.active) {
        updateAssemblyValue();
    }
    validateStep2();
}

function toggleAssembly(show) {
    appState.assembly.active = show;
    document.getElementById('addAssemblyBtn').style.display = show ? 'none' : 'block';
    document.getElementById('assemblyDetails').style.display = show ? 'block' : 'none';
    if (show) {
        updateAssemblyValue();
    }
}

function updateAssemblyValue() {
    appState.assembly.value = appState.productsTotal * 0.10;
    document.getElementById('assemblyValue').textContent = `R$ ${appState.assembly.value.toFixed(2).replace('.', ',')}`;
}

function updateAssemblyChoice() {
    appState.assembly.paymentOption = document.querySelector('input[name="assemblyOption"]:checked').value;
}

// ETAPA 3: DATAS
function generateDateOptions() {
    const container = document.getElementById('dateOptions');
    container.innerHTML = '';
    let dates = [];
    const today = new Date();
    
    for (let i = 1; i <= 33; i++) {
        let futureDate = new Date();
        futureDate.setDate(today.getDate() + i);
        const dayOfWeek = futureDate.getDay();
        if (dayOfWeek !== 0 && dayOfWeek !== 6) { // Não é Domingo nem Sábado
            dates.push(futureDate);
        }
    }

    container.innerHTML = dates.map(date => {
        const diffTime = date.getTime() - today.getTime();
        const daysUntil = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        const isSelected = appState.selectedDate && appState.selectedDate.date.toDateString() === date.toDateString();
        
        return `
            <div class="date-option ${isSelected ? 'selected' : ''}" onclick="
